{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan\\\\Documents\\\\GitHub\\\\3SAT_Instance_Generator\\\\src\\\\components\\\\Instance\\\\index.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ethers } from 'ethers';\nimport Generator from '../../artifacts/contracts/Generator.sol/Generator.json';\nimport { generatorAddress, requestAccount } from '../../App.js';\nimport { useLocation } from \"react-router-dom\";\nimport { useForm } from 'react-hook-form';\nimport ColumnHeaderTable from \"components/ColumnHeaderTable\";\nimport { checkPasswordMatchOrcid } from \"components/helper\";\nimport { Container, Wrap, TableSection, FormWrap1, FormInput, FormH1, Form, FormButton } from './InstanceElements';\nimport './messagesInfo.css';\nimport { secureStorage } from 'components/secureSession';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Instance = () => {\n  _s();\n  const location = useLocation();\n  const [rowData, setRowData] = useState({});\n  let history = useHistory();\n  const {\n    register,\n    handleSubmit,\n    reset\n  } = useForm();\n  useEffect(() => {\n    if (location.state) {\n      setRowData(location.state.rowData);\n    }\n  }, [location.state]);\n  const headerItems = [{\n    name: \"id\",\n    label: \"ID\"\n  }, {\n    name: \"chain\",\n    label: \"Chain\"\n  }, {\n    name: \"size\",\n    label: \"Size\"\n  }, {\n    name: \"created\",\n    label: \"Date Created\"\n  }, {\n    name: \"solution\",\n    label: \"Solution hash\"\n  }, {\n    name: \"solved\",\n    label: \"Solved\"\n  }, {\n    name: \"ended\",\n    label: \"Date Solution\"\n  }];\n  async function async_solveInstance(_ref) {\n    let {\n      solution_hash,\n      algorithm_hash,\n      hash_method\n    } = _ref;\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n      const transaction = await contract.solveInstance(secureStorage.getItem('password'), rowData.id, solution_hash, algorithm_hash, hash_method, {\n        gasLimit: 10000000\n      });\n      await transaction.wait();\n      reset({\n        solution_hash: \"\",\n        algorithm_hash: \"\",\n        hash_method: \"\"\n      });\n      history.push({\n        pathname: '/user'\n      });\n    }\n  }\n  const handleResolve = data => {\n    console.log(data);\n    async_solveInstance(data);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Wrap, {\n      children: /*#__PURE__*/_jsxDEV(TableSection, {\n        children: /*#__PURE__*/_jsxDEV(ColumnHeaderTable, {\n          headerItems: headerItems,\n          data: rowData,\n          footer: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 4\n    }, this), Object.keys(rowData).length > 0 && !rowData.solved && secureStorage.getItem(\"currOrcid\") && checkPasswordMatchOrcid(secureStorage.getItem(\"currOrcid\")) && /*#__PURE__*/_jsxDEV(FormWrap1, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit(handleResolve),\n        children: [/*#__PURE__*/_jsxDEV(FormH1, {\n          children: \"Resolve the instance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"field-tip\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"tip-content\",\n            children: \"Hash of the file containing the solution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n            ...register(\"solution_hash\"),\n            type: \"text\",\n            name: \"solution_hash\",\n            placeholder: \"Solution hash\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"field-tip\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"tip-content\",\n            children: \"Hash of the algorithm file used to find the solution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n            ...register(\"algorithm_hash\"),\n            type: \"text\",\n            name: \"algorithm_hash\",\n            placeholder: \"Algorithm hash\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"field-tip\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"tip-content\",\n            children: \"Method used to obtain the hash (MD5, SHA256, Keccak-512...)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n            ...register(\"hash_method\"),\n            type: \"text\",\n            name: \"hash_method\",\n            placeholder: \"Hash method\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(FormButton, {\n          id: \"submit1\",\n          type: \"submit\",\n          value: \"Submit data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 7\n        }, this)]\n      }, 1, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 3\n  }, this);\n};\n_s(Instance, \"ISQXd3P+cuPnKJ2ZGjuybIahdpc=\", false, function () {\n  return [useLocation, useHistory, useForm];\n});\n_c = Instance;\nexport default Instance;\nvar _c;\n$RefreshReg$(_c, \"Instance\");","map":{"version":3,"names":["useState","useEffect","useHistory","ethers","Generator","generatorAddress","requestAccount","useLocation","useForm","ColumnHeaderTable","checkPasswordMatchOrcid","Container","Wrap","TableSection","FormWrap1","FormInput","FormH1","Form","FormButton","secureStorage","Instance","location","rowData","setRowData","history","register","handleSubmit","reset","state","headerItems","name","label","async_solveInstance","solution_hash","algorithm_hash","hash_method","window","ethereum","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","transaction","solveInstance","getItem","id","gasLimit","wait","push","pathname","handleResolve","data","console","log","Object","keys","length","solved"],"sources":["C:/Users/Jonathan/Documents/GitHub/3SAT_Instance_Generator/src/components/Instance/index.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ethers } from 'ethers';\r\nimport Generator from '../../artifacts/contracts/Generator.sol/Generator.json';\r\nimport { generatorAddress, requestAccount } from '../../App.js';\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { useForm } from 'react-hook-form';\r\nimport ColumnHeaderTable from \"components/ColumnHeaderTable\";\r\nimport { checkPasswordMatchOrcid } from \"components/helper\";\r\nimport {\r\n\tContainer,\r\n\tWrap,\r\n\tTableSection,\r\n\tFormWrap1,\r\n\tFormInput,\r\n\tFormH1,\r\n\tForm,\r\n\tFormButton\r\n} from './InstanceElements'\r\nimport './messagesInfo.css';\r\n\r\nimport { secureStorage } from 'components/secureSession';\r\n\r\n\r\nconst Instance = () => {\r\n\tconst location = useLocation();\r\n\tconst [rowData, setRowData] = useState({});\r\n\tlet history = useHistory();\r\n\r\n\tconst {\r\n\t\tregister,\r\n\t\thandleSubmit,\r\n\t\treset,\r\n\t} = useForm();\r\n\r\n\tuseEffect(() => {\r\n\t\tif (location.state) {\r\n\t\t\tsetRowData(location.state.rowData);\r\n\t\t}\r\n\t}, [location.state])\r\n\r\n\tconst headerItems = [\r\n\t\t{ name: \"id\", label: \"ID\" },\r\n\t\t{ name: \"chain\", label: \"Chain\" },\r\n\t\t{ name: \"size\", label: \"Size\" },\r\n\t\t{ name: \"created\", label: \"Date Created\" },\r\n\t\t{ name: \"solution\", label: \"Solution hash\" },\r\n\t\t{ name: \"solved\", label: \"Solved\" },\r\n\t\t{ name: \"ended\", label: \"Date Solution\" },\r\n\t]\r\n\r\n\tasync function async_solveInstance({ solution_hash, algorithm_hash, hash_method }) {\r\n\t\tif (typeof window.ethereum !== 'undefined') {\r\n\t\t\tawait requestAccount()\r\n\t\t\tconst provider = new ethers.providers.Web3Provider(window.ethereum);\r\n\t\t\tconst signer = provider.getSigner()\r\n\t\t\tconst contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\r\n\t\t\tconst transaction = await contract.solveInstance(\r\n\t\t\t\tsecureStorage.getItem('password'),\r\n\t\t\t\trowData.id,\r\n\t\t\t\tsolution_hash,\r\n\t\t\t\talgorithm_hash,\r\n\t\t\t\thash_method,\r\n\t\t\t\t{ gasLimit: 10000000 })\r\n\t\t\tawait transaction.wait();\r\n\t\t\treset({ solution_hash: \"\", algorithm_hash: \"\", hash_method: \"\" });\r\n\r\n\t\t\thistory.push({\r\n\t\t\t\tpathname: '/user'\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleResolve = (data) => {\r\n\t\tconsole.log(data);\r\n\t\tasync_solveInstance(data);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<Wrap>\r\n\t\t\t\t<TableSection>\r\n\t\t\t\t\t<ColumnHeaderTable headerItems={headerItems} data={rowData} footer></ColumnHeaderTable>\r\n\t\t\t\t</TableSection>\r\n\t\t\t</Wrap>\r\n\t\t\t{/* solved === false */}\r\n\t\t\t{Object.keys(rowData).length > 0 &&\r\n\t\t\t\t!rowData.solved &&\r\n\t\t\t\tsecureStorage.getItem(\"currOrcid\") &&\r\n\t\t\t\tcheckPasswordMatchOrcid(secureStorage.getItem(\"currOrcid\")) &&\r\n\r\n\t\t\t\t<FormWrap1>\r\n\t\t\t\t\t<Form key={1} onSubmit={handleSubmit(handleResolve)}>\r\n\t\t\t\t\t\t<FormH1>Resolve the instance</FormH1>\r\n\t\t\t\t\t\t<span className=\"field-tip\">\r\n\t\t\t\t\t\t\t<span className=\"tip-content\">Hash of the file containing the solution</span>\r\n\t\t\t\t\t\t\t<FormInput {...register(\"solution_hash\")} type=\"text\" name=\"solution_hash\" placeholder=\"Solution hash\" />\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<span className=\"field-tip\">\r\n\t\t\t\t\t\t\t<span className=\"tip-content\">Hash of the algorithm file used to find the solution</span>\r\n\r\n\t\t\t\t\t\t\t<FormInput {...register(\"algorithm_hash\")} type=\"text\" name=\"algorithm_hash\" placeholder=\"Algorithm hash\" />\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<span className=\"field-tip\">\r\n\t\t\t\t\t\t\t<span className=\"tip-content\">Method used to obtain the hash (MD5, SHA256, Keccak-512...)</span>\r\n\r\n\t\t\t\t\t\t\t<FormInput {...register(\"hash_method\")} type=\"text\" name=\"hash_method\" placeholder=\"Hash method\" />\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<FormButton id=\"submit1\" type=\"submit\" value=\"Submit data\" />\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t</FormWrap1>\r\n\t\t\t}\r\n\t\t</Container>\r\n\t);\r\n}\r\n\r\nexport default Instance;"],"mappings":"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"},"metadata":{},"sourceType":"module"}