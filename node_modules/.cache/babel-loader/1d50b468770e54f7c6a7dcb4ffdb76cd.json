{"ast":null,"code":"import { generatorAddress, requestAccount } from '../App.js';\nimport { ethers } from 'ethers';\nimport Generator from '../artifacts/contracts/Generator.sol/Generator.json';\nimport { secureStorage } from 'components/secureSession';\n\n/*\r\n* Get hash information about a instance from the smart conrtract\r\n*/\nexport async function async_getHash(_id) {\n  if (typeof window.ethereum !== 'undefined') {\n    await requestAccount();\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\n    try {\n      const signer = provider.getSigner();\n      const result = await contract.connect(signer).getHash(_id);\n      if (result[0] !== '') {\n        console.log(\"Solution information for instance \" + _id + \":\");\n        console.log(\"\t- Solution hash: \" + result[0]);\n        console.log(\"\t- Algorithm hash: \" + result[1]);\n        console.log(\"\t- Hash method used: \" + result[2]);\n      }\n    } catch (err) {\n      console.log(\"Error: \", err);\n    }\n  }\n}\n\n/*\r\n* Check if the password match with the orcid\r\n*/\nexport const checkPasswordMatchOrcid = orcid => {\n  var sha256 = require('js-sha256');\n  let secret = cutHash(sha256(orcid));\n  // console.log(secret);\n  return secret === secureStorage.getItem('password');\n  // return true;\n};\n\n/*\r\n* Function to obtain the first 10 number elements from the hash generated baed on the orcid\r\n*/\nconst cutHash = elem => {\n  var cut = elem.replace(/[^0-9]/g, '');\n  var result = cut.substring(0, 10);\n  return result;\n};","map":{"version":3,"names":["generatorAddress","requestAccount","ethers","Generator","secureStorage","async_getHash","_id","window","ethereum","provider","providers","Web3Provider","contract","Contract","abi","signer","getSigner","result","connect","getHash","console","log","err","checkPasswordMatchOrcid","orcid","sha256","require","secret","cutHash","getItem","elem","cut","replace","substring"],"sources":["C:/Users/Jonathan/Documents/GitHub/3SAT_Instance_Generator/src/components/helper.js"],"sourcesContent":["import { generatorAddress, requestAccount } from '../App.js';\r\nimport { ethers } from 'ethers';\r\nimport Generator from '../artifacts/contracts/Generator.sol/Generator.json';\r\nimport { secureStorage } from 'components/secureSession';\r\n\r\n/*\r\n* Get hash information about a instance from the smart conrtract\r\n*/\r\nexport async function async_getHash(_id) {\r\n\tif (typeof window.ethereum !== 'undefined') {\r\n\t\tawait requestAccount()\r\n\t\tconst provider = new ethers.providers.Web3Provider(window.ethereum)\r\n\t\tconst contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\r\n\t\ttry {\r\n\t\t\tconst signer = provider.getSigner();\r\n\t\t\tconst result = await contract.connect(signer).getHash(_id);\r\n\t\t\tif(result[0] !== ''){\r\n\t\t\t\tconsole.log(\"Solution information for instance \" + _id + \":\");\r\n\t\t\t\tconsole.log(\"\t- Solution hash: \" + result[0]);\r\n\t\t\t\tconsole.log(\"\t- Algorithm hash: \" + result[1]);\r\n\t\t\t\tconsole.log(\"\t- Hash method used: \" + result[2]);\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log(\"Error: \", err)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/*\r\n* Check if the password match with the orcid\r\n*/\r\nexport const checkPasswordMatchOrcid = (orcid) => {\r\n\tvar sha256 = require('js-sha256');\r\n\tlet secret = cutHash(sha256(orcid));\r\n\t// console.log(secret);\r\n\treturn secret === secureStorage.getItem('password');\r\n\t// return true;\r\n}\r\n\r\n/*\r\n* Function to obtain the first 10 number elements from the hash generated baed on the orcid\r\n*/\r\nconst cutHash = (elem) => {\r\n\tvar cut = elem.replace(/[^0-9]/g, '');\r\n\tvar result = cut.substring(0, 10);\r\n\treturn result;\r\n}"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,cAAc,QAAQ,WAAW;AAC5D,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,SAAS,MAAM,qDAAqD;AAC3E,SAASC,aAAa,QAAQ,0BAA0B;;AAExD;AACA;AACA;AACA,OAAO,eAAeC,aAAa,CAACC,GAAG,EAAE;EACxC,IAAI,OAAOC,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;IAC3C,MAAMP,cAAc,EAAE;IACtB,MAAMQ,QAAQ,GAAG,IAAIP,MAAM,CAACQ,SAAS,CAACC,YAAY,CAACJ,MAAM,CAACC,QAAQ,CAAC;IACnE,MAAMI,QAAQ,GAAG,IAAIV,MAAM,CAACW,QAAQ,CAACb,gBAAgB,EAAEG,SAAS,CAACW,GAAG,EAAEL,QAAQ,CAAC;IAC/E,IAAI;MACH,MAAMM,MAAM,GAAGN,QAAQ,CAACO,SAAS,EAAE;MACnC,MAAMC,MAAM,GAAG,MAAML,QAAQ,CAACM,OAAO,CAACH,MAAM,CAAC,CAACI,OAAO,CAACb,GAAG,CAAC;MAC1D,IAAGW,MAAM,CAAC,CAAC,CAAC,KAAK,EAAE,EAAC;QACnBG,OAAO,CAACC,GAAG,CAAC,oCAAoC,GAAGf,GAAG,GAAG,GAAG,CAAC;QAC7Dc,OAAO,CAACC,GAAG,CAAC,oBAAoB,GAAGJ,MAAM,CAAC,CAAC,CAAC,CAAC;QAC7CG,OAAO,CAACC,GAAG,CAAC,qBAAqB,GAAGJ,MAAM,CAAC,CAAC,CAAC,CAAC;QAC9CG,OAAO,CAACC,GAAG,CAAC,uBAAuB,GAAGJ,MAAM,CAAC,CAAC,CAAC,CAAC;MACjD;IACD,CAAC,CAAC,OAAOK,GAAG,EAAE;MACbF,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEC,GAAG,CAAC;IAC5B;EACD;AACD;;AAEA;AACA;AACA;AACA,OAAO,MAAMC,uBAAuB,GAAIC,KAAK,IAAK;EACjD,IAAIC,MAAM,GAAGC,OAAO,CAAC,WAAW,CAAC;EACjC,IAAIC,MAAM,GAAGC,OAAO,CAACH,MAAM,CAACD,KAAK,CAAC,CAAC;EACnC;EACA,OAAOG,MAAM,KAAKvB,aAAa,CAACyB,OAAO,CAAC,UAAU,CAAC;EACnD;AACD,CAAC;;AAED;AACA;AACA;AACA,MAAMD,OAAO,GAAIE,IAAI,IAAK;EACzB,IAAIC,GAAG,GAAGD,IAAI,CAACE,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;EACrC,IAAIf,MAAM,GAAGc,GAAG,CAACE,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;EACjC,OAAOhB,MAAM;AACd,CAAC"},"metadata":{},"sourceType":"module"}