{"ast":null,"code":"import { generatorAddress, requestAccount } from '../App.js';\nimport { ethers } from 'ethers';\nimport Generator from '../artifacts/contracts/Generator.sol/Generator.json';\nimport { secureStorage } from 'components/secureSession';\n/*\r\n* Get hash information about a instance from the smart conrtract\r\n*/\n\nexport async function async_getHash(_id) {\n  if (typeof window.ethereum !== 'undefined') {\n    await requestAccount();\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\n\n    try {\n      const signer = provider.getSigner();\n      const result = await contract.connect(signer).getHash(_id);\n\n      if (result[0] !== '') {\n        console.log(\"Solution information for instance \" + _id + \":\");\n        console.log(\"\t- Solution hash: \" + result[0]);\n        console.log(\"\t- Algorithm hash: \" + result[1]);\n        console.log(\"\t- Hash method used: \" + result[2]);\n      }\n    } catch (err) {\n      console.log(\"Error: \", err);\n    }\n  }\n}\n/*\r\n* Check if the password match with the orcid\r\n*/\n\nexport const checkPasswordMatchOrcid = orcid => {\n  var sha256 = require('js-sha256');\n\n  let secret = cutHash(sha256(orcid)); // console.log(secret);\n\n  return secret === secureStorage.getItem('password'); // return true;\n};\n/*\r\n* Function to obtain the first 10 number elements from the hash generated baed on the orcid\r\n*/\n\nconst cutHash = elem => {\n  var cut = elem.replace(/[^0-9]/g, '');\n  var result = cut.substring(0, 10);\n  return result;\n};","map":{"version":3,"sources":["C:/Users/Jonathan/Documents/GitHub/3SAT_Instance_Generator/src/components/helper.js"],"names":["generatorAddress","requestAccount","ethers","Generator","secureStorage","async_getHash","_id","window","ethereum","provider","providers","Web3Provider","contract","Contract","abi","signer","getSigner","result","connect","getHash","console","log","err","checkPasswordMatchOrcid","orcid","sha256","require","secret","cutHash","getItem","elem","cut","replace","substring"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,cAA3B,QAAiD,WAAjD;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,SAAP,MAAsB,qDAAtB;AACA,SAASC,aAAT,QAA8B,0BAA9B;AAEA;AACA;AACA;;AACA,OAAO,eAAeC,aAAf,CAA6BC,GAA7B,EAAkC;AACxC,MAAI,OAAOC,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;AAC3C,UAAMP,cAAc,EAApB;AACA,UAAMQ,QAAQ,GAAG,IAAIP,MAAM,CAACQ,SAAP,CAAiBC,YAArB,CAAkCJ,MAAM,CAACC,QAAzC,CAAjB;AACA,UAAMI,QAAQ,GAAG,IAAIV,MAAM,CAACW,QAAX,CAAoBb,gBAApB,EAAsCG,SAAS,CAACW,GAAhD,EAAqDL,QAArD,CAAjB;;AACA,QAAI;AACH,YAAMM,MAAM,GAAGN,QAAQ,CAACO,SAAT,EAAf;AACA,YAAMC,MAAM,GAAG,MAAML,QAAQ,CAACM,OAAT,CAAiBH,MAAjB,EAAyBI,OAAzB,CAAiCb,GAAjC,CAArB;;AACA,UAAGW,MAAM,CAAC,CAAD,CAAN,KAAc,EAAjB,EAAoB;AACnBG,QAAAA,OAAO,CAACC,GAAR,CAAY,uCAAuCf,GAAvC,GAA6C,GAAzD;AACAc,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBJ,MAAM,CAAC,CAAD,CAAzC;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBJ,MAAM,CAAC,CAAD,CAA1C;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0BJ,MAAM,CAAC,CAAD,CAA5C;AACA;AACD,KATD,CASE,OAAOK,GAAP,EAAY;AACbF,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,GAAvB;AACA;AACD;AACD;AAED;AACA;AACA;;AACA,OAAO,MAAMC,uBAAuB,GAAIC,KAAD,IAAW;AACjD,MAAIC,MAAM,GAAGC,OAAO,CAAC,WAAD,CAApB;;AACA,MAAIC,MAAM,GAAGC,OAAO,CAACH,MAAM,CAACD,KAAD,CAAP,CAApB,CAFiD,CAGjD;;AACA,SAAOG,MAAM,KAAKvB,aAAa,CAACyB,OAAd,CAAsB,UAAtB,CAAlB,CAJiD,CAKjD;AACA,CANM;AAQP;AACA;AACA;;AACA,MAAMD,OAAO,GAAIE,IAAD,IAAU;AACzB,MAAIC,GAAG,GAAGD,IAAI,CAACE,OAAL,CAAa,SAAb,EAAwB,EAAxB,CAAV;AACA,MAAIf,MAAM,GAAGc,GAAG,CAACE,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CAAb;AACA,SAAOhB,MAAP;AACA,CAJD","sourcesContent":["import { generatorAddress, requestAccount } from '../App.js';\r\nimport { ethers } from 'ethers';\r\nimport Generator from '../artifacts/contracts/Generator.sol/Generator.json';\r\nimport { secureStorage } from 'components/secureSession';\r\n\r\n/*\r\n* Get hash information about a instance from the smart conrtract\r\n*/\r\nexport async function async_getHash(_id) {\r\n\tif (typeof window.ethereum !== 'undefined') {\r\n\t\tawait requestAccount()\r\n\t\tconst provider = new ethers.providers.Web3Provider(window.ethereum)\r\n\t\tconst contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\r\n\t\ttry {\r\n\t\t\tconst signer = provider.getSigner();\r\n\t\t\tconst result = await contract.connect(signer).getHash(_id);\r\n\t\t\tif(result[0] !== ''){\r\n\t\t\t\tconsole.log(\"Solution information for instance \" + _id + \":\");\r\n\t\t\t\tconsole.log(\"\t- Solution hash: \" + result[0]);\r\n\t\t\t\tconsole.log(\"\t- Algorithm hash: \" + result[1]);\r\n\t\t\t\tconsole.log(\"\t- Hash method used: \" + result[2]);\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log(\"Error: \", err)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/*\r\n* Check if the password match with the orcid\r\n*/\r\nexport const checkPasswordMatchOrcid = (orcid) => {\r\n\tvar sha256 = require('js-sha256');\r\n\tlet secret = cutHash(sha256(orcid));\r\n\t// console.log(secret);\r\n\treturn secret === secureStorage.getItem('password');\r\n\t// return true;\r\n}\r\n\r\n/*\r\n* Function to obtain the first 10 number elements from the hash generated baed on the orcid\r\n*/\r\nconst cutHash = (elem) => {\r\n\tvar cut = elem.replace(/[^0-9]/g, '');\r\n\tvar result = cut.substring(0, 10);\r\n\treturn result;\r\n}"]},"metadata":{},"sourceType":"module"}